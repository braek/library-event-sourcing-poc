/*
 * This file is generated by jOOQ.
 */
package be.koder.library.rdbms.tables.records


import be.koder.library.rdbms.tables.Event

import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.JSONB
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventRecord() : UpdatableRecordImpl<EventRecord>(Event.EVENT), Record6<UUID?, Long?, OffsetDateTime?, String?, JSONB?, Array<String?>?> {

    var id: UUID?
        set(value) = set(0, value)
        get() = get(0) as UUID?

    var sequenceId: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    var occurredOn: OffsetDateTime?
        set(value) = set(2, value)
        get() = get(2) as OffsetDateTime?

    var type: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var payload: JSONB?
        set(value) = set(4, value)
        get() = get(4) as JSONB?

    var tags: Array<String?>?
        set(value) = set(5, value)
        get() = get(5) as Array<String?>?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<UUID?, Long?, OffsetDateTime?, String?, JSONB?, Array<String?>?> = super.fieldsRow() as Row6<UUID?, Long?, OffsetDateTime?, String?, JSONB?, Array<String?>?>
    override fun valuesRow(): Row6<UUID?, Long?, OffsetDateTime?, String?, JSONB?, Array<String?>?> = super.valuesRow() as Row6<UUID?, Long?, OffsetDateTime?, String?, JSONB?, Array<String?>?>
    override fun field1(): Field<UUID?> = Event.EVENT.ID
    override fun field2(): Field<Long?> = Event.EVENT.SEQUENCE_ID
    override fun field3(): Field<OffsetDateTime?> = Event.EVENT.OCCURRED_ON
    override fun field4(): Field<String?> = Event.EVENT.TYPE
    override fun field5(): Field<JSONB?> = Event.EVENT.PAYLOAD
    override fun field6(): Field<Array<String?>?> = Event.EVENT.TAGS
    override fun component1(): UUID? = id
    override fun component2(): Long? = sequenceId
    override fun component3(): OffsetDateTime? = occurredOn
    override fun component4(): String? = type
    override fun component5(): JSONB? = payload
    override fun component6(): Array<String?>? = tags
    override fun value1(): UUID? = id
    override fun value2(): Long? = sequenceId
    override fun value3(): OffsetDateTime? = occurredOn
    override fun value4(): String? = type
    override fun value5(): JSONB? = payload
    override fun value6(): Array<String?>? = tags

    override fun value1(value: UUID?): EventRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): EventRecord {
        this.sequenceId = value
        return this
    }

    override fun value3(value: OffsetDateTime?): EventRecord {
        this.occurredOn = value
        return this
    }

    override fun value4(value: String?): EventRecord {
        this.type = value
        return this
    }

    override fun value5(value: JSONB?): EventRecord {
        this.payload = value
        return this
    }

    override fun value6(value: Array<String?>?): EventRecord {
        this.tags = value
        return this
    }

    override fun values(value1: UUID?, value2: Long?, value3: OffsetDateTime?, value4: String?, value5: JSONB?, value6: Array<String?>?): EventRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised EventRecord
     */
    constructor(id: UUID? = null, sequenceId: Long? = null, occurredOn: OffsetDateTime? = null, type: String? = null, payload: JSONB? = null, tags: Array<String?>? = null): this() {
        this.id = id
        this.sequenceId = sequenceId
        this.occurredOn = occurredOn
        this.type = type
        this.payload = payload
        this.tags = tags
    }
}

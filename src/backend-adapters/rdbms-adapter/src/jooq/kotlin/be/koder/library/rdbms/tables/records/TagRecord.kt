/*
 * This file is generated by jOOQ.
 */
package be.koder.library.rdbms.tables.records


import be.koder.library.rdbms.tables.Tag

import java.util.UUID

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TagRecord() : UpdatableRecordImpl<TagRecord>(Tag.TAG), Record3<UUID?, String?, String?> {

    var eventId: UUID?
        set(value) = set(0, value)
        get() = get(0) as UUID?

    var type: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var value: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record3<UUID?, String?, String?> = super.key() as Record3<UUID?, String?, String?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<UUID?, String?, String?> = super.fieldsRow() as Row3<UUID?, String?, String?>
    override fun valuesRow(): Row3<UUID?, String?, String?> = super.valuesRow() as Row3<UUID?, String?, String?>
    override fun field1(): Field<UUID?> = Tag.TAG.EVENT_ID
    override fun field2(): Field<String?> = Tag.TAG.TYPE
    override fun field3(): Field<String?> = Tag.TAG.VALUE
    override fun component1(): UUID? = eventId
    override fun component2(): String? = type
    override fun component3(): String? = value
    override fun value1(): UUID? = eventId
    override fun value2(): String? = type
    override fun value3(): String? = value

    override fun value1(value: UUID?): TagRecord {
        this.eventId = value
        return this
    }

    override fun value2(value: String?): TagRecord {
        this.type = value
        return this
    }

    override fun value3(value: String?): TagRecord {
        this.value = value
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: String?): TagRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised TagRecord
     */
    constructor(eventId: UUID? = null, type: String? = null, value: String? = null): this() {
        this.eventId = eventId
        this.type = type
        this.value = value
    }
}

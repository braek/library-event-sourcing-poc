/*
 * This file is generated by jOOQ.
 */
package be.koder.library.rdbms.tables.records


import be.koder.library.rdbms.tables.EventStore

import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.JSONB
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EventStoreRecord() : UpdatableRecordImpl<EventStoreRecord>(EventStore.EVENT_STORE), Record8<UUID?, Long?, Int?, OffsetDateTime?, OffsetDateTime?, Array<String?>?, String?, JSONB?> {

    var id: UUID?
        set(value) = set(0, value)
        get() = get(0) as UUID?

    var sequenceId: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    var version: Int?
        set(value) = set(2, value)
        get() = get(2) as Int?

    var persistedOn: OffsetDateTime?
        set(value) = set(3, value)
        get() = get(3) as OffsetDateTime?

    var occurredOn: OffsetDateTime?
        set(value) = set(4, value)
        get() = get(4) as OffsetDateTime?

    var tags: Array<String?>?
        set(value) = set(5, value)
        get() = get(5) as Array<String?>?

    var type: String?
        set(value) = set(6, value)
        get() = get(6) as String?

    var payload: JSONB?
        set(value) = set(7, value)
        get() = get(7) as JSONB?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<UUID?, Long?, Int?, OffsetDateTime?, OffsetDateTime?, Array<String?>?, String?, JSONB?> = super.fieldsRow() as Row8<UUID?, Long?, Int?, OffsetDateTime?, OffsetDateTime?, Array<String?>?, String?, JSONB?>
    override fun valuesRow(): Row8<UUID?, Long?, Int?, OffsetDateTime?, OffsetDateTime?, Array<String?>?, String?, JSONB?> = super.valuesRow() as Row8<UUID?, Long?, Int?, OffsetDateTime?, OffsetDateTime?, Array<String?>?, String?, JSONB?>
    override fun field1(): Field<UUID?> = EventStore.EVENT_STORE.ID
    override fun field2(): Field<Long?> = EventStore.EVENT_STORE.SEQUENCE_ID
    override fun field3(): Field<Int?> = EventStore.EVENT_STORE.VERSION
    override fun field4(): Field<OffsetDateTime?> = EventStore.EVENT_STORE.PERSISTED_ON
    override fun field5(): Field<OffsetDateTime?> = EventStore.EVENT_STORE.OCCURRED_ON
    override fun field6(): Field<Array<String?>?> = EventStore.EVENT_STORE.TAGS
    override fun field7(): Field<String?> = EventStore.EVENT_STORE.TYPE
    override fun field8(): Field<JSONB?> = EventStore.EVENT_STORE.PAYLOAD
    override fun component1(): UUID? = id
    override fun component2(): Long? = sequenceId
    override fun component3(): Int? = version
    override fun component4(): OffsetDateTime? = persistedOn
    override fun component5(): OffsetDateTime? = occurredOn
    override fun component6(): Array<String?>? = tags
    override fun component7(): String? = type
    override fun component8(): JSONB? = payload
    override fun value1(): UUID? = id
    override fun value2(): Long? = sequenceId
    override fun value3(): Int? = version
    override fun value4(): OffsetDateTime? = persistedOn
    override fun value5(): OffsetDateTime? = occurredOn
    override fun value6(): Array<String?>? = tags
    override fun value7(): String? = type
    override fun value8(): JSONB? = payload

    override fun value1(value: UUID?): EventStoreRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): EventStoreRecord {
        this.sequenceId = value
        return this
    }

    override fun value3(value: Int?): EventStoreRecord {
        this.version = value
        return this
    }

    override fun value4(value: OffsetDateTime?): EventStoreRecord {
        this.persistedOn = value
        return this
    }

    override fun value5(value: OffsetDateTime?): EventStoreRecord {
        this.occurredOn = value
        return this
    }

    override fun value6(value: Array<String?>?): EventStoreRecord {
        this.tags = value
        return this
    }

    override fun value7(value: String?): EventStoreRecord {
        this.type = value
        return this
    }

    override fun value8(value: JSONB?): EventStoreRecord {
        this.payload = value
        return this
    }

    override fun values(value1: UUID?, value2: Long?, value3: Int?, value4: OffsetDateTime?, value5: OffsetDateTime?, value6: Array<String?>?, value7: String?, value8: JSONB?): EventStoreRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised EventStoreRecord
     */
    constructor(id: UUID? = null, sequenceId: Long? = null, version: Int? = null, persistedOn: OffsetDateTime? = null, occurredOn: OffsetDateTime? = null, tags: Array<String?>? = null, type: String? = null, payload: JSONB? = null): this() {
        this.id = id
        this.sequenceId = sequenceId
        this.version = version
        this.persistedOn = persistedOn
        this.occurredOn = occurredOn
        this.tags = tags
        this.type = type
        this.payload = payload
    }
}

/*
 * This file is generated by jOOQ.
 */
package be.koder.library.rdbms


import be.koder.library.rdbms.sequences.EVENT_STORE_SEQUENCE_ID_SEQ
import be.koder.library.rdbms.tables.EventStore
import be.koder.library.rdbms.tables.FlywaySchemaHistory
import org.jooq.Catalog
import org.jooq.Sequence
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Sandbox : SchemaImpl("sandbox", DefaultCatalog.DEFAULT_CATALOG) {
    companion object {

        /**
         * The reference instance of <code>sandbox</code>
         */
        val SANDBOX = Sandbox()
    }

    /**
     * The table <code>sandbox.event_store</code>.
     */
    val EVENT_STORE get() = EventStore.EVENT_STORE

    /**
     * The table <code>sandbox.flyway_schema_history</code>.
     */
    val FLYWAY_SCHEMA_HISTORY get() = FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getSequences(): List<Sequence<*>> = listOf(
        EVENT_STORE_SEQUENCE_ID_SEQ
    )

    override fun getTables(): List<Table<*>> = listOf(
        EventStore.EVENT_STORE,
        FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY
    )
}

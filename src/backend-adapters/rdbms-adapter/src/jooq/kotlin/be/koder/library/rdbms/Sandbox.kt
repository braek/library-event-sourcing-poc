/*
 * This file is generated by jOOQ.
 */
package be.koder.library.rdbms


import be.koder.library.rdbms.sequences.EVENT_SEQUENCE_ID_SEQ
import be.koder.library.rdbms.tables.Event
import be.koder.library.rdbms.tables.FlywaySchemaHistory
import be.koder.library.rdbms.tables.Tag

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Sequence
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Sandbox : SchemaImpl("sandbox", DefaultCatalog.DEFAULT_CATALOG) {
    companion object {

        /**
         * The reference instance of <code>sandbox</code>
         */
        val SANDBOX = Sandbox()
    }

    /**
     * The table <code>sandbox.event</code>.
     */
    val EVENT get() = Event.EVENT

    /**
     * The table <code>sandbox.flyway_schema_history</code>.
     */
    val FLYWAY_SCHEMA_HISTORY get() = FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY

    /**
     * The table <code>sandbox.tag</code>.
     */
    val TAG get() = Tag.TAG

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getSequences(): List<Sequence<*>> = listOf(
        EVENT_SEQUENCE_ID_SEQ
    )

    override fun getTables(): List<Table<*>> = listOf(
        Event.EVENT,
        FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY,
        Tag.TAG
    )
}
